#!/usr/bin/env bash
### BEGIN INIT INFO
# Provides: translates
# Required-Start: $all
# Required-Stop: $network $local_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start the translates at boot
# Description: Enable at boot time.
### END INIT INFO

# This is /etc/init.d/translates init.d script for single or multiple puma installations.

export RACK_ENV=production
export SERVER_ROOT=/opt/translates

__sig()
{
  typeset __pid
  [[ -s "$2" ]]       &&
  __pid="$(cat "$2" 2>/dev/null)" &&
  [[ -n "${__pid}" ]] &&
  kill -$1 "${__pid}" >/dev/null 2>&1 ||
  return $?
}

sig()
{
  __sig "$1" "$PID" || return $?
}

oldsig()
{
  __sig "$1" "$OLD_PID" || return $?
}

run()
{
  echo -n "$1 - "
  shift
  if
    "$@"
  then
    echo "OK"
  else
    typeset result=$?
    echo "Failed!" >&2
    return $result
  fi
}

prefix_command_with_su_fix_quoting()
{
  typeset -a __temp
  __temp=()
  while
    (( $# ))
  do
    __temp+=( "'$1'" )
    shift
  done
  CMD=( su - "${__owner}" -c "cd '$SERVER_ROOT' && ${__temp[*]}" )
}

setup ()
{
  echo "$SERVER_ROOT"
  cd $SERVER_ROOT || return $?

  export PID=/tmp/server.pid
  export OLD_PID="$PID.oldbin"
  export RAILS_ENV=production

  CMD=( bundle exec puma -C "${SERVER_ROOT}/config/puma.rb" -d )

  typeset __owner="$(stat -c "%U" "${SERVER_ROOT}")"
  if
    [[ "${USER:=$(whoami)}" == "${__owner}" ]]
  then
    true # it's all fine we run as owner of the app
  elif
    (( UID == 0 ))
  then
    prefix_command_with_su_fix_quoting "${CMD[@]}"
  else
    echo "ERROR: running not as owner(${__owner}) of '$SERVER_ROOT' and not as root($USER), prefix with 'sudo' and try again!"
    return 2
  fi
}

cmd_start()
{
  if sig 0
  then echo "Already started"
  else run "Starting" "${CMD[@]}" || return $?
  fi
}

wait_pid_kill()
{
  typeset __count=$1
  while
    (( __count > 0 )) &&
    sig 0
  do
    : $(( __count-- ))
    sleep 1s
  done
  sig 0 || return $?
}

cmd_stop()
{
  run "Stopping" sig QUIT
  if
    wait_pid_kill 5
  then
    run "Force stop" sig TERM
    if wait_pid_kill 3
    then return 1
    fi
  fi
}

cmd_restart()
{
  cmd_stop && cmd_start || return $?
}

cmd_reload()
{
  run "Reloading" sig USR2 &&
  wait_pid_kill 5 &&
  oldsig QUIT ||
  oldsig TERM ||
  cmd_restart ||
  return $?
}

cmd()
{
  setup || return $?
  case "$1" in
    start|stop|restart|reload)
      cmd_$1 || return $?
      ;;
    *)
      echo "Usage: $0 <start|stop|restart|reload>" >&2
      return 1
      ;;
  esac
}

start_stop ()
{
  cmd "$1" || return $?
}

start_stop "$@"